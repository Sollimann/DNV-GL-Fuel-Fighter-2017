
motor_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000041c  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000289  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ee  00000000  00000000  000009b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00000da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024d  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  000010ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001129  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	4f c0       	rjmp	.+158    	; 0xa4 <__bad_interrupt>
   6:	00 00       	nop
   8:	4d c0       	rjmp	.+154    	; 0xa4 <__bad_interrupt>
   a:	00 00       	nop
   c:	4b c0       	rjmp	.+150    	; 0xa4 <__bad_interrupt>
   e:	00 00       	nop
  10:	49 c0       	rjmp	.+146    	; 0xa4 <__bad_interrupt>
  12:	00 00       	nop
  14:	47 c0       	rjmp	.+142    	; 0xa4 <__bad_interrupt>
  16:	00 00       	nop
  18:	45 c0       	rjmp	.+138    	; 0xa4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	43 c0       	rjmp	.+134    	; 0xa4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	41 c0       	rjmp	.+130    	; 0xa4 <__bad_interrupt>
  22:	00 00       	nop
  24:	3f c0       	rjmp	.+126    	; 0xa4 <__bad_interrupt>
  26:	00 00       	nop
  28:	3d c0       	rjmp	.+122    	; 0xa4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3b c0       	rjmp	.+118    	; 0xa4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	39 c0       	rjmp	.+114    	; 0xa4 <__bad_interrupt>
  32:	00 00       	nop
  34:	37 c0       	rjmp	.+110    	; 0xa4 <__bad_interrupt>
  36:	00 00       	nop
  38:	35 c0       	rjmp	.+106    	; 0xa4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	33 c0       	rjmp	.+102    	; 0xa4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	31 c0       	rjmp	.+98     	; 0xa4 <__bad_interrupt>
  42:	00 00       	nop
  44:	2f c0       	rjmp	.+94     	; 0xa4 <__bad_interrupt>
  46:	00 00       	nop
  48:	2d c0       	rjmp	.+90     	; 0xa4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2b c0       	rjmp	.+86     	; 0xa4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	29 c0       	rjmp	.+82     	; 0xa4 <__bad_interrupt>
  52:	00 00       	nop
  54:	27 c0       	rjmp	.+78     	; 0xa4 <__bad_interrupt>
  56:	00 00       	nop
  58:	25 c0       	rjmp	.+74     	; 0xa4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	23 c0       	rjmp	.+70     	; 0xa4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	21 c0       	rjmp	.+66     	; 0xa4 <__bad_interrupt>
  62:	00 00       	nop
  64:	1f c0       	rjmp	.+62     	; 0xa4 <__bad_interrupt>
  66:	00 00       	nop
  68:	1d c0       	rjmp	.+58     	; 0xa4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1b c0       	rjmp	.+54     	; 0xa4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	19 c0       	rjmp	.+50     	; 0xa4 <__bad_interrupt>
  72:	00 00       	nop
  74:	17 c0       	rjmp	.+46     	; 0xa4 <__bad_interrupt>
  76:	00 00       	nop
  78:	15 c0       	rjmp	.+42     	; 0xa4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	13 c0       	rjmp	.+38     	; 0xa4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	11 c0       	rjmp	.+34     	; 0xa4 <__bad_interrupt>
  82:	00 00       	nop
  84:	0f c0       	rjmp	.+30     	; 0xa4 <__bad_interrupt>
  86:	00 00       	nop
  88:	0d c0       	rjmp	.+26     	; 0xa4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	0b c0       	rjmp	.+22     	; 0xa4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	09 c0       	rjmp	.+18     	; 0xa4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	2b d0       	rcall	.+86     	; 0xf8 <main>
  a2:	7d c0       	rjmp	.+250    	; 0x19e <_exit>

000000a4 <__bad_interrupt>:
  a4:	ad cf       	rjmp	.-166    	; 0x0 <__vectors>

000000a6 <adc_init>:
void start_conv(void){
	set_bit(ADCSRA, ADSC);
}

void adc_disenable(void){
	clear_bit(ADCSRA, ADEN);
  a6:	80 98       	cbi	0x10, 0	; 16
  a8:	ec e7       	ldi	r30, 0x7C	; 124
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <adc_read>:
}

uint8_t adc_read(void){
	ADMUX |= 0x00;
  ca:	ec e7       	ldi	r30, 0x7C	; 124
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 83       	st	Z, r24
	/* Start the conversion */
	set_bit(ADCSRA, ADSC);
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	/* Wait for the conversion to complete */
	while(test_bit(ADCSRA, ADSC));
  dc:	80 81       	ld	r24, Z
  de:	86 fd       	sbrc	r24, 6
  e0:	fd cf       	rjmp	.-6      	; 0xdc <adc_read+0x12>
	
	unsigned int full_value = 0;
	full_value = ADC;
  e2:	80 91 78 00 	lds	r24, 0x0078
  e6:	90 91 79 00 	lds	r25, 0x0079
  ea:	8f 3f       	cpi	r24, 0xFF	; 255
  ec:	91 05       	cpc	r25, r1
  ee:	19 f0       	breq	.+6      	; 0xf6 <adc_read+0x2c>
  f0:	10 f0       	brcs	.+4      	; 0xf6 <adc_read+0x2c>
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	90 e0       	ldi	r25, 0x00	; 0
	if(full_value > 255)
		full_value = 255;
	else if(full_value < 0)
		full_value = 0;
	return full_value;
  f6:	08 95       	ret

000000f8 <main>:

//int max_allowed = nax_value(30km/t,15A)

int main(void)
{
    pwm_init();
  f8:	0e d0       	rcall	.+28     	; 0x116 <pwm_init>
	adc_init();
  fa:	d5 df       	rcall	.-86     	; 0xa6 <adc_init>
	
		set_pwm_A(pwm_value);
		*/
		
		
		a_value = adc_read();
  fc:	e6 df       	rcall	.-52     	; 0xca <adc_read>
  fe:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	83 ec       	ldi	r24, 0xC3	; 195
 102:	99 e0       	ldi	r25, 0x09	; 9
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0xc>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x12>
 10a:	00 00       	nop
		_delay_ms(10);
		//printf(a_val);
		set_pwm_A(a_value);
 10c:	8c 2f       	mov	r24, r28
 10e:	3b d0       	rcall	.+118    	; 0x186 <set_pwm_A>
		set_pwm_B(a_value);
 110:	8c 2f       	mov	r24, r28
 112:	3f d0       	rcall	.+126    	; 0x192 <set_pwm_B>
	}
 114:	f3 cf       	rjmp	.-26     	; 0xfc <main+0x4>

00000116 <pwm_init>:

void pwm_A_off(void){
	OCR3A = 0x00;
}
void pwm_B_off(void){
	OCR3B = 0x00;
 116:	73 98       	cbi	0x0e, 3	; 14
 118:	6b 9a       	sbi	0x0d, 3	; 13
 11a:	74 98       	cbi	0x0e, 4	; 14
 11c:	6c 9a       	sbi	0x0d, 4	; 13
 11e:	a1 e9       	ldi	r26, 0x91	; 145
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	8c 91       	ld	r24, X
 124:	80 61       	ori	r24, 0x10	; 16
 126:	8c 93       	st	X, r24
 128:	8c 91       	ld	r24, X
 12a:	88 60       	ori	r24, 0x08	; 8
 12c:	8c 93       	st	X, r24
 12e:	e0 e9       	ldi	r30, 0x90	; 144
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 83       	st	Z, r24
 138:	80 81       	ld	r24, Z
 13a:	8e 7f       	andi	r24, 0xFE	; 254
 13c:	80 83       	st	Z, r24
 13e:	80 81       	ld	r24, Z
 140:	80 68       	ori	r24, 0x80	; 128
 142:	80 83       	st	Z, r24
 144:	80 81       	ld	r24, Z
 146:	8f 7b       	andi	r24, 0xBF	; 191
 148:	80 83       	st	Z, r24
 14a:	80 81       	ld	r24, Z
 14c:	80 62       	ori	r24, 0x20	; 32
 14e:	80 83       	st	Z, r24
 150:	80 81       	ld	r24, Z
 152:	8f 7e       	andi	r24, 0xEF	; 239
 154:	80 83       	st	Z, r24
 156:	8c 91       	ld	r24, X
 158:	8b 7f       	andi	r24, 0xFB	; 251
 15a:	8c 93       	st	X, r24
 15c:	8c 91       	ld	r24, X
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	8c 93       	st	X, r24
 162:	8c 91       	ld	r24, X
 164:	81 60       	ori	r24, 0x01	; 1
 166:	8c 93       	st	X, r24
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 97 00 	sts	0x0097, r25
 170:	80 93 96 00 	sts	0x0096, r24
 174:	10 92 99 00 	sts	0x0099, r1
 178:	10 92 98 00 	sts	0x0098, r1
 17c:	10 92 9b 00 	sts	0x009B, r1
 180:	10 92 9a 00 	sts	0x009A, r1
 184:	08 95       	ret

00000186 <set_pwm_A>:
}

void set_pwm_A(uint8_t duty){
	//range from 0x00 to ICR3 value(see init)
	OCR3A = duty;
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 99 00 	sts	0x0099, r25
 18c:	80 93 98 00 	sts	0x0098, r24
 190:	08 95       	ret

00000192 <set_pwm_B>:
}

void set_pwm_B(uint8_t duty){
	//range from 0x00 to ICR3 value(see init)
	OCR3B = duty;
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 9b 00 	sts	0x009B, r25
 198:	80 93 9a 00 	sts	0x009A, r24
 19c:	08 95       	ret

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
